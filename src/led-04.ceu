#include "sdl/sdl.ceu"

var& _SDL_Renderer ren;
watching SDL_go("LED 4", 640,480, SDL_Color(0xCC,0xCC,0xCC,0xFF)) -> (&ren) do
    par do
        var bool is_on = false;
        par do
            loop do
                par/or do
                    var SDL_Point pt = val SDL_Point(100,100);
                    var _SDL_MouseButtonEvent&& mse =
                            await SDL_MOUSEBUTTONDOWN
                            until (_SDL_Circle_vs_Mouse(&&pt as _SDL_Point&&,25,mse) as bool);
                with
                    every 500ms do
                        is_on = not is_on;
                    end
                end
                await 2s;
            end
        with
            every SDL_REDRAW do
                _filledCircleRGBA(&&ren, 100,100,50, 0xFF,0xFF,0xFF,0xFF);
                if is_on then
                    _filledCircleRGBA(&&ren, 100,100,47, 0x00,0x88,0x00,0xFF);
                else
                    _filledCircleRGBA(&&ren, 100,100,47, 0x00,0x00,0x00,0xFF);
                end
            end
        end
    with
        var bool is_on = false;
        par do
            loop do
                par/or do
                    var SDL_Point pt = val SDL_Point(300,100);
                    var _SDL_MouseButtonEvent&& mse =
                            await SDL_MOUSEBUTTONDOWN
                            until (_SDL_Circle_vs_Mouse(&&pt as _SDL_Point&&,25,mse) as bool);
                with
                    every 500ms do
                        is_on = not is_on;
                    end
                end
                await 2s;
            end
        with
            every SDL_REDRAW do
                _filledCircleRGBA(&&ren, 300,100,50, 0xFF,0xFF,0xFF,0xFF);
                if is_on then
                    _filledCircleRGBA(&&ren, 300,100,47, 0x00,0x88,0x00,0xFF);
                else
                    _filledCircleRGBA(&&ren, 300,100,47, 0x00,0x00,0x00,0xFF);
                end
            end
        end
    end
end

escape 0;
